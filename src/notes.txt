 # Categorias de Classe (design)

 - Views: telas do sistema
 - Controllers: Controladores (meio de campo entre a tela e o sistema)
 - Entities: Entidades de negocio como produtos, cliente, etc...
 - Sevices: Representam serviços, como CRUD, Serviço de Email, Serviço de pedido, Serviço de autenticação, etc..
 - Repositories: Classes responsaveis por acessar um banco de dados

 # Composição
 Um tipo de associação que permite que um objeto contenha outro.


#inheritance and polymorphism

## Inheritance: A herança é um tipo de associação que permite que uma classe Herde dados e comportamentos de outra
Sintaxe:
- extends
- super

o protected serve para dar acesso apinas para as subclasses dentro e fora do assembly

Upcasting: Casting da subclasse para a superclasse, uso comum no polimorfismo
Downcasting: Casting da superclasse para subclasse
tradução: Casting = Fundação

Sobreposição: É a implementação de um método de uma superclasse na subclasse
- Ao sobrescrever um método, devemos incluir nele o "@Orverride"


## Polymorphism: polimosrfismo é recurso que permite que variáveis de um mesmo tipo mais genérico possam apontar para objetos de tipos
específicos diferentes, tendo assim comportamentos diferentes conforme cada tipo específico.

Classes abstratas: são classes que não podem ser instanciadas
-É uma forma de garantir herança total: somente subclasses não abstratas podem ser instanciadas, mas nunca a superclasse abstrata
Sintaxe: abstract class ClassName {}

Métodos abstratos: São métodos que não possuem implementação
- Métodos precisam ser abstratos quando a classe é genérica demais para conter sua implementação.
- Se uma classe possuir pelo menos um método abstrato essa classe também é abstrata.


#Java Collections

ArrayList: o ArrayList é uma lista de objetos que podem ter um tipo e possuem métodos.
-sintaxe: ArrayList<T>
-Metodos:
    - add() : adiciona um objeto ao array contanto que seja do mesmo tipo ou herdede do tipo do array
    - size() : pega o tamanho do arrayList

# toString
toString: é um metodo que todos os obejtos herdam da classe object, podemos usar o @Override para sobrescrever esse método.
-uso:  podemos usa-lo quando queremos imprimir a classe com seus atricutos.

# Contructors
Construtor: tem como função a criação de um objeto em memória
- uso: podemos passar parametros para iniciar o nosso objeto já com alguns atributos (alguns objetos já precisam nascer com atributos)
- sintaxe: public ClassName(params) {}
- sobrecarga: contrutores podem ter sobrecargas, classes podem ter mais de um construtor.